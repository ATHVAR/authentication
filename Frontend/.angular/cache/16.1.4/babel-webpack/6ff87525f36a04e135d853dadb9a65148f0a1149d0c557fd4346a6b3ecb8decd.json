{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Output, EventEmitter } from '@angular/core';\nexport let LoginComponent = class LoginComponent {\n  constructor(loginService, loginFormVisibilityService, auth, router) {\n    this.loginService = loginService;\n    this.loginFormVisibilityService = loginFormVisibilityService;\n    this.auth = auth;\n    this.router = router;\n    this.email = '';\n    this.password = '';\n    this.showLoginForm = false;\n    this.submitted = new EventEmitter();\n    this.loginFormOpened = new EventEmitter();\n    this.loginFormVisibilityService.showLoginForm$.subscribe(visibility => {\n      this.showLoginForm = visibility;\n    });\n  }\n  toggleLoginForm() {\n    this.showLoginForm = !this.showLoginForm;\n    this.loginFormVisibilityService.setShowLoginFormVisibility(this.showLoginForm);\n    this.loginFormOpened.emit(this.showLoginForm);\n  }\n  onSubmit() {\n    // Emit the 'submitted' event when the form is submitted\n    this.submitted.emit();\n    // Call the login service to perform the API call to your backend server\n    this.loginService.login(this.email, this.password).subscribe(response => {\n      alert('Login successful');\n      this.loginFormVisibilityService.setShowLoginFormVisibility(false);\n      this.loginFormVisibilityService.setLoggedIn(true);\n      // this.router.navigate(['home']);\n      this.authservice.loginuser(this.user).subscribe(res => {\n        localStorage.setItem('token', res.token);\n        localStorage.setItem('role', res.role);\n        this.router.navigate([res.api]);\n      });\n    }, error => {\n      alert('Invalid credentials');\n    });\n  }\n  onCancel() {\n    this.loginFormVisibilityService.setShowLoginFormVisibility(false);\n  }\n};\n__decorate([Output()], LoginComponent.prototype, \"submitted\", void 0);\n__decorate([Output()], LoginComponent.prototype, \"loginFormOpened\", void 0);\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","Output","EventEmitter","LoginComponent","constructor","loginService","loginFormVisibilityService","auth","router","email","password","showLoginForm","submitted","loginFormOpened","showLoginForm$","subscribe","visibility","toggleLoginForm","setShowLoginFormVisibility","emit","onSubmit","login","response","alert","setLoggedIn","authservice","loginuser","user","res","localStorage","setItem","token","role","navigate","api","error","onCancel","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\ATHIRA\\Desktop\\New folder (2)\\Main_project-master (1)\\Main_project-master\\Frontend\\src\\app\\pages\\login\\login.component.ts"],"sourcesContent":["import { Component, Output, EventEmitter } from '@angular/core';\nimport { LoginService } from 'src/app/shared/link.service';\nimport { LoginFormVisibilityService } from 'src/app/shared/login-form-visiblity.service';\nimport { Router } from '@angular/router';\nimport { AuthserviceService } from 'src/app/shared/authservice.service';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent {\n  email: string = '';\n  password: string = '';\n  showLoginForm: boolean = false;\n\n  constructor(\n    private loginService: LoginService,\n    private loginFormVisibilityService: LoginFormVisibilityService,\n    private auth\n    private router:Router\n  ) {\n    this.loginFormVisibilityService.showLoginForm$.subscribe(\n      (visibility: boolean) => {\n        this.showLoginForm = visibility;\n      }\n    );\n  }\n\n  @Output() submitted = new EventEmitter<void>();\n  @Output() loginFormOpened = new EventEmitter<boolean>();\n\n  toggleLoginForm() {\n    this.showLoginForm = !this.showLoginForm;\n    this.loginFormVisibilityService.setShowLoginFormVisibility(this.showLoginForm);\n    this.loginFormOpened.emit(this.showLoginForm);\n  }\n\n  onSubmit() {\n    // Emit the 'submitted' event when the form is submitted\n    this.submitted.emit();\n\n    // Call the login service to perform the API call to your backend server\n    this.loginService.login(this.email, this.password).subscribe(\n      (response) => {\n        alert('Login successful');\n        this.loginFormVisibilityService.setShowLoginFormVisibility(false);\n        this.loginFormVisibilityService.setLoggedIn(true);\n        // this.router.navigate(['home']);\n        this.authservice.loginuser(this.user).subscribe((res:any)=>{\n          localStorage.setItem('token',res.token);\n          localStorage.setItem('role',res.role);\n          this.router.navigate([res.api]);\n      \n      })\n      },\n      (error) => {\n        alert('Invalid credentials');\n      }\n    );\n  }\n\n  onCancel() {\n    this.loginFormVisibilityService.setShowLoginFormVisibility(false);\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,YAAY,QAAQ,eAAe;AAYxD,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAKzBC,YACUC,YAA0B,EAC1BC,0BAAsD,EACtDC,IAAI,EACJC,MAAa;IAHb,KAAAH,YAAY,GAAZA,YAAY;IACZ,KAAAC,0BAA0B,GAA1BA,0BAA0B;IAC1B,KAAAC,IAAI,GAAJA,IAAI;IACJ,KAAAC,MAAM,GAANA,MAAM;IARhB,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,aAAa,GAAY,KAAK;IAepB,KAAAC,SAAS,GAAG,IAAIV,YAAY,EAAQ;IACpC,KAAAW,eAAe,GAAG,IAAIX,YAAY,EAAW;IARrD,IAAI,CAACI,0BAA0B,CAACQ,cAAc,CAACC,SAAS,CACrDC,UAAmB,IAAI;MACtB,IAAI,CAACL,aAAa,GAAGK,UAAU;IACjC,CAAC,CACF;EACH;EAKAC,eAAeA,CAAA;IACb,IAAI,CAACN,aAAa,GAAG,CAAC,IAAI,CAACA,aAAa;IACxC,IAAI,CAACL,0BAA0B,CAACY,0BAA0B,CAAC,IAAI,CAACP,aAAa,CAAC;IAC9E,IAAI,CAACE,eAAe,CAACM,IAAI,CAAC,IAAI,CAACR,aAAa,CAAC;EAC/C;EAEAS,QAAQA,CAAA;IACN;IACA,IAAI,CAACR,SAAS,CAACO,IAAI,EAAE;IAErB;IACA,IAAI,CAACd,YAAY,CAACgB,KAAK,CAAC,IAAI,CAACZ,KAAK,EAAE,IAAI,CAACC,QAAQ,CAAC,CAACK,SAAS,CACzDO,QAAQ,IAAI;MACXC,KAAK,CAAC,kBAAkB,CAAC;MACzB,IAAI,CAACjB,0BAA0B,CAACY,0BAA0B,CAAC,KAAK,CAAC;MACjE,IAAI,CAACZ,0BAA0B,CAACkB,WAAW,CAAC,IAAI,CAAC;MACjD;MACA,IAAI,CAACC,WAAW,CAACC,SAAS,CAAC,IAAI,CAACC,IAAI,CAAC,CAACZ,SAAS,CAAEa,GAAO,IAAG;QACzDC,YAAY,CAACC,OAAO,CAAC,OAAO,EAACF,GAAG,CAACG,KAAK,CAAC;QACvCF,YAAY,CAACC,OAAO,CAAC,MAAM,EAACF,GAAG,CAACI,IAAI,CAAC;QACrC,IAAI,CAACxB,MAAM,CAACyB,QAAQ,CAAC,CAACL,GAAG,CAACM,GAAG,CAAC,CAAC;MAEnC,CAAC,CAAC;IACF,CAAC,EACAC,KAAK,IAAI;MACRZ,KAAK,CAAC,qBAAqB,CAAC;IAC9B,CAAC,CACF;EACH;EAEAa,QAAQA,CAAA;IACN,IAAI,CAAC9B,0BAA0B,CAACY,0BAA0B,CAAC,KAAK,CAAC;EACnE;CACD;AApCWmB,UAAA,EAATpC,MAAM,EAAE,C,gDAAsC;AACrCoC,UAAA,EAATpC,MAAM,EAAE,C,sDAA+C;AAnB7CE,cAAc,GAAAkC,UAAA,EAL1BrC,SAAS,CAAC;EACTsC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWrC,cAAc,CAsD1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}